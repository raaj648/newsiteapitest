I have made a sports stream website with API in html, css, and javascript code. I have completed making the homepage, search result page, and the match information page. But when users land on the matchinformation page, they see the stream links of the match. So, I have to make a "Watchnow" page to embed the stream links so that users can easily watch the stream on my website. I have made a folder "Watchnow". Now I have to make the index.html, watchnow.css, and watchnow.js file for the "Watchnow" page. But the Layout and the structure will be same as my other pages have. The header and all other layout will be same. Header logo, search options, discord butons, etc will be same as other pages. I am providing you my matchinformation page codes so that you can see what is the current structure of my site. Here is the matchinformation page index.html: "
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Loading Match...</title>
  
  <link rel="preconnect" href="https://streamed.pk" crossorigin>
  <link rel="dns-prefetch" href="//streamed.pk">
  
  <!-- === INLINE CRITICAL CSS === -->
  <style>
    :root{--bg-primary:#0a0a0a;--bg-secondary:#161b22;--text-primary:#c9d1d9;--text-secondary:#8b949e;--accent-primary:#2f81f7;--border-color:#262626;--shadow-color:rgba(0,0,0,.2);--shimmer-color:rgba(255,255,255,.1)}*{margin:0;padding:0;box-sizing:border-box}body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif;background:var(--bg-primary);color:var(--text-primary)}.fullpage{padding:0 1rem}.hidden{display:none!important}.site-header{position:sticky;top:0;left:0;width:100%;background:var(--bg-primary);border-bottom:1px solid var(--border-color);padding:10px 20px;display:flex;justify-content:space-between;align-items:center;z-index:1000;margin-bottom:15px}.header-left{display:flex;align-items:center;gap:12px;flex-grow:1;min-width:0}.site-logo img{height:40px;border-radius:6px;display:block}.header-search{max-width:400px;width:100%;margin:0}.header-search input{background:var(--bg-secondary);color:var(--text-primary);padding:8px 12px;font-size:14px;border:2px solid var(--border-color);border-radius:6px;outline:0}.header-right{display:flex;align-items:center;gap:12px}.header-btn{display:inline-flex;align-items:center;justify-content:center;padding:8px 14px;border-radius:6px;text-decoration:none;font-size:14px;font-weight:600;white-space:nowrap;background-color:var(--bg-secondary);color:var(--text-primary);border:1px solid var(--border-color)}.header-btn-discord{background-color:#5865f2;color:#fff;border:1px solid #5865f2}.match-details-container{max-width:900px;margin:15px auto;padding:1rem}#match-header{margin-bottom:10px}#match-header h1{font-size:clamp(1.5rem,3vw,2rem);color:var(--text-primary);text-align:center}
    /* Skeleton styles */
    .skeleton{background-color:var(--bg-secondary);color:transparent;border-radius:6px;user-select:none;position:relative;overflow:hidden}.skeleton::after{content:'';position:absolute;top:0;left:-150%;width:100%;height:100%;transform:skewX(-20deg);background-image:linear-gradient(90deg,transparent,var(--shimmer-color),transparent);animation:shimmer 1.8s infinite cubic-bezier(.4,0,.6,1)}@keyframes shimmer{100%{left:150%}}
    h1 .skeleton{height:36px;width:70%;margin:0 auto;margin-bottom:5px}
    p .skeleton{height:18px;width:90%;margin:0 auto;margin-bottom:8px}p .skeleton.w-60{width:60%}
  </style>
  
  <link rel="preload" href="style.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <noscript><link rel="stylesheet" href="style.css"></noscript>
  <script src="script.js" defer></script>
</head>
<body class="dark-theme">

  <!-- Sticky Header -->
  <div class="site-header">
    <div class="header-left">
      <a href="../index.html" class="site-logo">
        <img src="https://methstreams.world/Buffstreams.world.jpg" alt="Site Logo" fetchpriority="high" decoding="async" width="135" height="40">
      </a>
      <a href="../index.html" class="header-btn" title="Home">Home</a>
      <div class="search-container header-search">
        <input type="text" id="search-input" placeholder="Search matches..." autocomplete="off">
      </div>
    </div>
    <div class="header-right">
      <a href="https://discord.gg/yourserver" target="_blank" rel="noopener noreferrer nofollow" class="header-btn header-btn-discord" title="Join Discord">Join Discord</a>
    </div>
  </div>

  <!-- Main Content -->
  <div class="fullpage">
    <main class="match-details-container">
      <!-- SKELETON LOADER FOR PAGE CONTENT -->
      <div id="match-header">
        <h1 id="match-title"><div class="skeleton"></div></h1>
      </div>
      <p id="match-description">
        <span class="skeleton"></span>
        <span class="skeleton w-60"></span>
      </p>
      
      <div id="countdown-section" class="countdown hidden"></div>
      
      <section id="streams-section">
        <div class="skeleton-header">
          <div class="skeleton-button"></div>
          <div class="skeleton-summary"></div>
        </div>
        
        <div id="streams-container">
            <!-- Skeleton for a stream source -->
            <div class="stream-source is-loading">
                <div class="source-header">
                    <span class="source-name">&nbsp;</span>
                    <span class="source-count">&nbsp;</span>
                </div>
                <small class="source-desc">&nbsp;</small>
                <div class="stream-row"></div>
                <div class="stream-row"></div>
            </div>
        </div>
        
        <button id="show-all-sources-btn" class="show-all-btn hidden"></button>
      </section>
    </main>
  </div>

  <!-- Search Overlay -->
  <div id="search-overlay">
    <div class="search-overlay-content">
      <button id="search-close">&times;</button>
      <input type="text" id="overlay-search-input" placeholder="Search matches..." autocomplete="off">
      <div id="overlay-search-results"></div>
    </div>
  </div>
</body>
</html>
"
Here is the matchinformation page style.css: "
/* ================================== */
/*         THEME VARIABLES            */
/* ================================== */
:root {
  --bg-primary: #0a0a0a; --bg-secondary: #161b22; --text-primary: #c9d1d9; --text-secondary: #8b949e; --accent-primary: #2f81f7; --accent-hover: #58a6ff; --border-color: #262626; --shadow-color: rgba(0,0,0,0.2); --placeholder-bg: #262626; --shimmer-color: rgba(255, 255, 255, 0.1); --accent-red: #e50914;
}

/* ================================== */
/*          GENERAL STYLES            */
/* ================================== */
* { margin: 0; padding: 0; box-sizing: border-box; }
body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background: var(--bg-primary); color: var(--text-primary); }
.fullpage { padding: 0 1rem; }
.hidden { display: none !important; }

/* ================================== */
/*        SHARED COMPONENTS           */
/* ================================== */
.site-header { position: sticky; top: 0; left: 0; width: 100%; background: var(--bg-primary); border-bottom: 1px solid var(--border-color); padding: 10px 20px; display: flex; justify-content: space-between; align-items: center; z-index: 1000; margin-bottom: 15px; }
.header-left { display: flex; align-items: center; gap: 12px; flex-grow: 1; min-width: 0; }
.site-logo img { height: 40px; border-radius: 6px; display: block; }
.header-search { max-width: 400px; width: 100%; }
.header-search input { background: var(--bg-secondary); color: var(--text-primary); padding: 8px 12px; font-size: 14px; border: 2px solid var(--border-color); border-radius: 6px; outline: none; }
.header-search input:focus { border-color: var(--accent-primary); }
.header-right { display: flex; align-items: center; gap: 12px; }
.header-btn { display: inline-flex; align-items: center; justify-content: center; padding: 8px 14px; border-radius: 6px; text-decoration: none; font-size: 14px; font-weight: 600; transition: all 0.2s ease-in-out; cursor: pointer; white-space: nowrap; background-color: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-color); }
.header-btn:hover { background-color: #2a2a2a; border-color: var(--text-secondary); transform: translateY(-1px); }
.header-btn-discord { background-color: #5865F2; color: #fff; border-color: #5865F2; }
#search-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); display: none; justify-content: center; align-items: flex-start; padding-top: 60px; z-index: 9999; backdrop-filter: blur(4px); }
.search-overlay-content { background: var(--bg-secondary); width: 95%; max-width: 700px; border-radius: 12px; padding: 20px; box-shadow: 0 8px 24px var(--shadow-color); position: relative; border: 1px solid var(--border-color); }
#search-overlay input { background: var(--bg-primary); color: var(--text-primary); width: 100%; padding: 14px 18px; font-size: 16px; border: 2px solid var(--accent-primary); border-radius: 10px; outline: none; margin-bottom: 20px; }
#search-overlay input:focus { border-color: var(--accent-hover); box-shadow: 0 0 8px rgba(26,115,232,0.3); }
#search-close { position: absolute; top: 1px; right: 6px; font-size: 30px; background: transparent; border: none; cursor: pointer; color: var(--text-secondary); }
#overlay-search-results { max-height: 70vh; overflow-y: auto; display: flex; flex-wrap: wrap; gap: 5px; justify-content: center; }
.search-result-item { flex: 0 0 200px; background: var(--bg-secondary); border-radius: 0.5rem; overflow: hidden; cursor: pointer; transition: transform 0.2s, box-shadow 0.2s; display: flex; flex-direction: column; position: relative; }
.search-result-item:hover { transform: translateY(-4px); box-shadow: 0 6px 16px var(--shadow-color); }
.match-poster { width: 100%; height: auto; aspect-ratio: 200 / 120; object-fit: cover; }
.status-badge { position: absolute; top: 10px; left: 10px; background: #DC2626; color: #fff; padding: 2px 4px; border-radius: 9999px; font-size: 12px; font-weight: bold; }
.status-badge.date { background: rgba(0,0,0,0.7); }
.match-info { padding: 10px; }
.match-title { font-size: 15px; font-weight: bold; margin-bottom: 6px; height: 40px; line-height: 20px; overflow: hidden; }
.match-meta-row { display: flex; justify-content: space-between; font-size: 14px; color: var(--text-secondary); }
.no-results { text-align: center; color: var(--text-secondary); font-size: 1.1rem; padding: 60px 20px; background-color: var(--bg-secondary); border-radius: 0.5rem; border: 1px solid var(--border-color); }

/* ================================== */
/*    MATCH INFORMATION PAGE STYLES   */
/* ================================== */
.match-details-container { max-width: 900px; margin: 15px auto; padding: 1rem; }
#match-header { margin-bottom: 10px; min-height: 48px; }
#match-header h1 { font-size: clamp(1.5rem, 3vw, 2rem); text-align: center; }
#match-description { color: var(--text-primary); font-size: 1rem; line-height: 1.6; margin: 1rem 0 2rem 0; text-align: center; min-height: 54px; }
.countdown { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; font-size: 1.2rem; margin-bottom: 20px; font-weight: bold; color: var(--accent-hover); text-align: center; }
.back-button-styled { background: #111; border: 1px solid var(--border-color); color: var(--text-secondary); font-size: 0.9rem; font-weight: 600; padding: 8px 14px; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s ease; display: inline-flex; align-items: center; gap: 8px; letter-spacing: 0.5px; margin-bottom:1rem;}
.back-button-styled:hover { background-color: var(--bg-secondary); color: var(--text-primary); border-color: #dc2626; }
.back-button-styled .separator { color: var(--accent-red); }
#sources-summary { font-size: 0.9rem; color: var(--text-secondary); font-style: italic; margin-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; min-height: 22px; }
.stream-source { background-color: var(--bg-secondary); border: 1px solid #fbbf24b3; border-radius: 0.75rem; margin-bottom: 1.5rem; padding: 1rem 1.25rem; box-shadow: 0 4px 12px var(--shadow-color); }
.stream-source.hidden-source { display: none; }
.source-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 6px; }
.source-name { font-size: 1.5rem; font-weight: 700; color: var(--text-primary); }
.source-count { font-size: 0.9rem; font-weight: 500; color: #dc2626; background-color: #dc26261a; padding: 4px 10px; border-radius: 9999px; }
.source-desc { display: block; margin-bottom: 1.25rem; color: var(--text-secondary); font-size: 0.9rem; }
.stream-row { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 1rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); margin: 0.5rem 0; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s ease; text-decoration: none; color: var(--text-primary); }
.stream-row:hover { background-color: #1a1a1a; border-color: var(--accent-primary); transform: translateY(-2px); }
.stream-label { display: flex; align-items: center; gap: 0.75rem; font-weight: 500; }
.quality-tag { display: inline-block; padding: 3px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: 400; color: #dc2626; text-transform: uppercase; min-width: 35px; text-align: center; }
.quality-tag.hd { background-color: #dc262633; }
.quality-tag.sd { background-color: #26262680; color: var(--text-primary);}
.stream-meta { display: flex; align-items: center; gap: 1rem; color: var(--text-secondary); font-size: 0.9rem; }
.viewers-count, .stream-lang { display: flex; align-items: center; gap: 5px; }
.open-arrow { display: inline-flex; align-items: center; color: var(--text-secondary); opacity: 0.6; transition: all 0.2s ease; }
.stream-row:hover .open-arrow { opacity: 1; color: var(--accent-hover); }
.show-all-btn { display: block; width: 100%; text-align: center; padding: 12px; margin-top: 1rem; background-color: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-color); border-radius: 0.5rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease; }
.show-all-btn:hover { background-color: #2a2a2a; border-color: var(--accent-primary); }

/* SKELETON LOADER STYLES */
.skeleton { background-color: var(--bg-secondary); color: transparent; border-radius: 6px; user-select: none; position: relative; overflow: hidden; display: inline-block; }
.skeleton::after { content: ''; position: absolute; top: 0; left: -150%; width: 100%; height: 100%; transform: skewX(-20deg); background-image: linear-gradient(90deg, transparent, var(--shimmer-color), transparent); animation: shimmer 1.8s infinite cubic-bezier(0.4, 0, 0.6, 1); }
@keyframes shimmer { 100% { left: 150%; } }
h1 .skeleton { height: 36px; width: 70%; margin-bottom: 5px; }
p .skeleton { height: 18px; width: 90%; margin-bottom: 8px; }
p .skeleton.w-60 { width: 60%; }
.skeleton-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; }
.skeleton-button { width: 120px; height: 38px; background-color: var(--bg-secondary); border-radius: 0.5rem; }
.skeleton-summary { width: 200px; height: 22px; background-color: var(--bg-secondary); border-radius: 4px; }
.stream-source.is-loading { border-color: transparent; box-shadow: none; pointer-events: none; }
.is-loading > * { visibility: hidden; }
.is-loading::after { content: ''; position: absolute; top: 0; left: -150%; width: 100%; height: 100%; transform: skewX(-20deg); background-image: linear-gradient(90deg, transparent, var(--shimmer-color), transparent); animation: shimmer 1.8s infinite; }

/* RESPONSIVE DESIGN */
@media (max-width: 768px) {
  .site-logo { display: none; }
  .site-header { padding: 8px 12px; }
  .header-btn { padding: 6px 10px; font-size: 13px; }
  #match-header h1 { font-size: 1.3rem; }
  #match-description { font-size: 0.9rem; }
  .stream-row { flex-direction: column; align-items: flex-start; gap: 10px; }
}
@media (max-width: 480px) {
  .fullpage { padding: 0 0.5rem; }
  .header-search { max-width: 140px; }
  .header-left { gap: 8px; }
  .source-header { flex-direction: column; align-items: flex-start; gap: 6px; }
  .source-name { font-size: 1.25rem; }
  .match-details-container { padding: 0; }
  .stream-row { padding: 0.65rem 0.4rem; }
  .stream-source { padding: 1rem; }
  .stream-meta { font-size: 0.8rem; }
  .stream-label { font-size: 14px; }
}
"
Here is the matchinformation page script.js: "
// =================================================================================
// SCRIPT.JS - Match Information Page (Corrected & Fully Optimized)
// =================================================================================

// ---------------------------
// GLOBAL CACHE & HELPERS
// ---------------------------
let allMatchesCache = [];
let searchDataFetched = false;

// Reusable card creation for search results
function createMatchCard(match) {
    const card = document.createElement("div");
    card.className = "search-result-item";
    
    const poster = document.createElement("img");
    poster.className = "match-poster";
    poster.src = (match.teams?.home?.badge && match.teams?.away?.badge)
        ? `https://streamed.pk/api/images/poster/${match.teams.home.badge}/${match.teams.away.badge}.webp`
        : "https://methstreams.world/mysite.jpg";
    poster.alt = match.title || "Match Poster";
    poster.onerror = () => { poster.onerror = null; poster.src = "https://methstreams.world/mysite.jpg"; };
    
    const { badge, badgeType, meta } = formatDateTime(match.date);
    const statusBadge = document.createElement("div");
    statusBadge.classList.add("status-badge", badgeType);
    statusBadge.textContent = badge;
    
    const info = document.createElement("div");
    info.classList.add("match-info");
    const title = document.createElement("div");
    title.classList.add("match-title");
    title.textContent = match.title || "Untitled Match";
    const metaRow = document.createElement("div");
    metaRow.classList.add("match-meta-row");
    const category = document.createElement("span");
    category.classList.add("match-category");
    category.textContent = match.category ? match.category.charAt(0).toUpperCase() + match.category.slice(1) : "Unknown";
    const timeOrDate = document.createElement("span");
    timeOrDate.textContent = meta;
    
    metaRow.append(category, timeOrDate);
    info.append(title, metaRow);
    card.append(poster, statusBadge, info);
    card.addEventListener("click", () => { window.location.href = `?id=${match.id}`; });
    
    return card;
}

function formatDateTime(timestamp) {
    const date = new Date(timestamp), now = new Date();
    const isToday = date.toDateString() === now.toDateString();
    const timeFormat = { hour: "numeric", minute: "2-digit" };
    if (timestamp <= now.getTime()) return { badge: "LIVE", badgeType: "live", meta: date.toLocaleTimeString("en-US", timeFormat) };
    if (isToday) return { badge: date.toLocaleTimeString("en-US", timeFormat), badgeType: "date", meta: "Today" };
    return { badge: date.toLocaleDateString("en-US", { month: "short", day: "numeric" }), badgeType: "date", meta: date.toLocaleTimeString("en-US", timeFormat) };
}

async function fetchSearchData() {
    if (searchDataFetched) return;
    try {
        const res = await fetch("https://streamed.pk/api/matches/all");
        if (!res.ok) throw new Error("Failed to fetch search data");
        const allMatches = await res.json();
        const map = new Map();
        allMatches.forEach(m => map.set(m.id, m));
        allMatchesCache = Array.from(map.values());
        searchDataFetched = true;
    } catch (err) {
        console.error("Error fetching search data:", err);
    }
}

function setupSearch() {
    const searchInput = document.getElementById("search-input");
    const searchOverlay = document.getElementById("search-overlay");
    const overlayInput = document.getElementById("overlay-search-input");
    const overlayResults = document.getElementById("overlay-search-results");
    const searchClose = document.getElementById("search-close");

    const openSearch = () => {
        fetchSearchData();
        searchOverlay.style.display = "flex";
        overlayInput.value = searchInput.value;
        overlayInput.focus();
    };
    
    searchInput.addEventListener("focus", openSearch);
    searchClose.addEventListener("click", () => { searchOverlay.style.display = "none"; });
    searchOverlay.addEventListener("click", (e) => {
        if (!e.target.closest(".search-overlay-content")) searchOverlay.style.display = "none";
    });

    overlayInput.addEventListener("input", function() {
        const q = this.value.trim().toLowerCase();
        overlayResults.innerHTML = "";
        if (!q || !searchDataFetched) return;
        const filtered = allMatchesCache.filter(m => (m.title || "").toLowerCase().includes(q) || (m.teams?.home?.name || "").toLowerCase().includes(q) || (m.teams?.away?.name || "").toLowerCase().includes(q));
        filtered.slice(0, 12).forEach(match => {
            overlayResults.appendChild(createMatchCard(match));
        });
    });

    overlayInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
            const q = overlayInput.value.trim();
            if (q) window.location.href = `../SearchResult/?q=${encodeURIComponent(q)}`;
        }
    });
}

// ---------------------------
// PAGE-SPECIFIC RENDER FUNCTIONS
// ---------------------------
function renderStreamRow(stream, index) {
    const row = document.createElement("a");
    row.className = "stream-row";
    row.href = `Watchnow/?url=${encodeURIComponent(stream.embedUrl)}`;
    row.target = "_blank";
    const qualityTagClass = stream.hd ? "hd" : "sd";
    const qualityText = stream.hd ? "HD" : "SD";
    const viewersHTML = stream.viewers > 0 
        ? `<div class="viewers-count"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path><circle cx="12" cy="12" r="3"></circle></svg>${stream.viewers}</div>`
        : '';
    const openLinkIcon = `<span class="open-arrow"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg></span>`;
    
    // === THIS IS THE CORRECTED LINE WITH THE WORLD ICON RESTORED ===
    const languageHTML = `<div class="stream-lang"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"></path><path d="M2 12h20"></path></svg>${stream.language || "English"}</div>`;
    
    row.innerHTML = `
        <div class="stream-label">
            <span class="quality-tag ${qualityTagClass}">${qualityText}</span>
            <span>Stream ${index + 1}</span>
            ${openLinkIcon}
        </div>
        <div class="stream-meta">
            ${viewersHTML}
            ${languageHTML}
        </div>`;
    return row;
}

async function renderStreamSource(source) {
    const sourceMeta = { alpha: "Most reliable (720p 30fps)", charlie: "Good backup", intel: "Large event coverage", admin: "Admin added streams", hotel: "Very high quality feeds", foxtrot: "Good quality, offers home/away feeds", delta: "Reliable backup", echo: "Great quality overall" };
    const description = sourceMeta[source.source.toLowerCase()] || "Reliable streams";
    try {
        const res = await fetch(`https://streamed.pk/api/stream/${source.source}/${source.id}`);
        if (!res.ok) return null;
        let streams = await res.json();
        if (!streams || streams.length === 0) return null;
        
        streams.sort((a, b) => (b.hd - a.hd) || ((b.viewers || 0) - (a.viewers || 0)));
        
        const sourceContainer = document.createElement("div");
        sourceContainer.className = "stream-source";
        sourceContainer.innerHTML = `<div class="source-header"><span class="source-name">${source.source.charAt(0).toUpperCase() + source.source.slice(1)}</span><span class="source-count">${streams.length} streams</span></div><small class="source-desc">✨ ${description}</small>`;
        
        const fragment = document.createDocumentFragment();
        streams.forEach((stream, i) => fragment.appendChild(renderStreamRow(stream, i)));
        sourceContainer.appendChild(fragment);
        
        return sourceContainer;
    } catch (err) {
        console.error(err);
        return null;
    }
}

async function loadMatchDetails() {
    const urlParams = new URLSearchParams(window.location.search);
    const matchId = urlParams.get("id");
    
    const titleEl = document.getElementById("match-title");
    const descEl = document.getElementById("match-description");
    const countdownEl = document.getElementById("countdown-section");
    const streamsContainer = document.getElementById("streams-container");
    const showAllBtn = document.getElementById("show-all-sources-btn");
    
    if (!matchId) { titleEl.innerHTML = "Error: Match ID not provided."; return; }
    
    try {
        const res = await fetch("https://streamed.pk/api/matches/all");
        if (!res.ok) throw new Error("Could not fetch match list");
        const allMatches = await res.json();
        const match = allMatches.find(m => String(m.id) === String(matchId));
        if (!match) { throw new Error("Match not found in the list"); }

        const fullTitle = `${match.title} Live Stream Links`;
        document.title = fullTitle;
        titleEl.textContent = fullTitle;
        descEl.textContent = `To watch ${match.title} streams, scroll down and choose a stream link of your choice. If no links appear, the event may not be live yet.`;
        
        const matchDate = Number(match.date);
        if (matchDate > Date.now()) {
            countdownEl.classList.remove("hidden");
            const interval = setInterval(() => {
                const diff = matchDate - Date.now();
                if (diff <= 0) {
                    countdownEl.classList.add("hidden");
                    clearInterval(interval);
                    window.location.reload();
                    return;
                }
                const days = Math.floor(diff / 86400000);
                const hrs = String(Math.floor((diff % 86400000) / 3600000)).padStart(2, "0");
                const mins = String(Math.floor((diff % 3600000) / 60000)).padStart(2, "0");
                const secs = String(Math.floor((diff % 60000) / 1000)).padStart(2, "0");
                const dayString = days > 0 ? `${days} day${days > 1 ? 's' : ''} ` : "";
                countdownEl.textContent = `The event starts in ${dayString}${hrs}:${mins}:${secs}`;
            }, 1000);
        }
        
        const streamsSection = document.getElementById("streams-section");
        const skeletonHeader = streamsSection.querySelector('.skeleton-header');
        if (skeletonHeader) {
            const realHeaderHTML = `
                <button id="back-button" class="back-button-styled">
                    <span>&lt;-- BCK</span><span class="separator">•</span><span>Back</span>
                </button>
                <p id="sources-summary"></p>
            `;
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = realHeaderHTML;
            skeletonHeader.replaceWith(...tempDiv.childNodes);

            document.getElementById("back-button").addEventListener("click", () => {
                window.history.length > 1 ? window.history.back() : window.location.href = '../index.html';
            });
        }
        
        streamsContainer.innerHTML = ""; 

        if (match.sources && match.sources.length > 0) {
            const sourcePromises = match.sources.map(renderStreamSource);
            const sourceElements = (await Promise.all(sourcePromises)).filter(Boolean);
            const totalSources = sourceElements.length;

            const sourcesSummaryEl = document.getElementById('sources-summary');

            if (totalSources === 0) {
                streamsContainer.innerHTML = `<p class="no-results">No active streams found for this match yet.</p>`;
                if (sourcesSummaryEl) sourcesSummaryEl.textContent = 'No sources available';
                return;
            }

            const INITIAL_SOURCES_TO_SHOW = 3;
            if (sourcesSummaryEl) sourcesSummaryEl.textContent = `Showing top quality sources • ${Math.min(totalSources, INITIAL_SOURCES_TO_SHOW)} of ${totalSources} sources`;
            
            sourceElements.forEach((el, index) => {
                if (index >= INITIAL_SOURCES_TO_SHOW) el.classList.add('hidden-source');
                streamsContainer.appendChild(el);
            });

            if (totalSources > INITIAL_SOURCES_TO_SHOW) {
                const remainingCount = totalSources - INITIAL_SOURCES_TO_SHOW;
                showAllBtn.textContent = `Show all sources (${remainingCount} more) ⌄`;
                showAllBtn.classList.remove('hidden');
                showAllBtn.addEventListener('click', () => {
                    document.querySelectorAll('.hidden-source').forEach(el => el.classList.remove('hidden-source'));
                    showAllBtn.classList.add('hidden');
                    if (sourcesSummaryEl) sourcesSummaryEl.textContent = `Showing all ${totalSources} sources`;
                }, { once: true });
            }
        } else {
            const sourcesSummaryEl = document.getElementById('sources-summary');
            if (sourcesSummaryEl) sourcesSummaryEl.textContent = 'No sources available';
            streamsContainer.innerHTML = `<p class="no-results">Streams will be available shortly before the match begins.</p>`;
        }
    } catch (err) {
        console.error(err);
        titleEl.textContent = "Match Not Found";
        descEl.textContent = "The match you are looking for could not be found. It may have been removed or the ID is incorrect.";
        streamsContainer.innerHTML = '';
        document.querySelector('.skeleton-header')?.remove();
    }
}

// ---------------------------
// INITIALIZE PAGE
// ---------------------------
document.addEventListener("DOMContentLoaded", () => {
    loadMatchDetails();
    setupSearch(); 
});
"
Here is the API documentation: "
API Documentation

Welcome to the official Streamed API documentation. Our REST API provides access to sports matches, live streams, and related data in JSON format.

Quick Start
The API is free to use with no authentication required. Here's how to get started:

Browse matches to find available sports events
Get streams for a specific match
Explore sports to filter matches by category
Access team and event images for visual content
Basic Usage Example
// Example: Fetch all football matches
fetch('https://streamed.pk/api/matches/football')
  .then(response => response.json())
  .then(matches => {
    console.log(matches);
    
    // Get streams for the first match
    if (matches.length > 0) {
      const match = matches[0];
      const source = match.sources[0];
      
      fetch(`https://streamed.pk/api/stream/${source.source}/${source.id}`)
        .then(response => response.json())
        .then(streams => console.log(streams))
        .catch(error => console.error('Error fetching streams:', error));
    }
  })
  .catch(error => console.error('Error fetching matches:', error));
API Guidelines
All endpoints return JSON data
No authentication required
Current rate limits: None (may change in the future)
HTTP status codes follow standard conventions (200 OK, 404 Not Found, etc.)
Use appropriate error handling in your applications
Available Endpoints
Resource	Description	Documentation
/api/matches/...	Sports events data	Matches
/api/stream/...	Stream links for events	Streams
/api/sports	Available sports categories	Sports
/api/images/...	Team badges and event posters	Images

Matches API
The Matches API provides access to sports events data, including match details, team information, and available stream sources.

Match Object Structure
interface APIMatch {
    id: string;               // Unique identifier for the match
    title: string;            // Match title (e.g. "Team A vs Team B")
    category: string;         // Sport category (e.g. "football", "basketball")
    date: number;             // Unix timestamp in milliseconds
    poster?: string;          // URL path to match poster image
    popular: boolean;         // Whether the match is marked as popular
    teams?: {
        home?: {
            name: string;     // Home team name
            badge: string;    // URL path to home team badge
        },
        away?: {
            name: string;     // Away team name
            badge: string;    // URL path to away team badge
        }
    };
    sources: {
        source: string;       // Stream source identifier (e.g. "alpha", "bravo")
        id: string;           // Source-specific match ID
    }[];
}
Available Endpoints
Sport-Specific Matches
Get matches for a specific sport category:

GET /api/matches/[SPORT]

GET /api/matches/[SPORT]/popular

Note: Replace [SPORT] with a sport ID from the Sports API.

All Matches
Get all available matches across all sports:

GET /api/matches/all

GET /api/matches/all/popular

Today's Matches
Get matches scheduled for today:

GET /api/matches/all-today

GET /api/matches/all-today/popular

Live Matches
Get currently live matches:

GET /api/matches/live

GET /api/matches/live/popular

Usage Example
// Example: Get all live matches
fetch('https://streamed.pk/api/matches/live')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(matches => {
    // Process the matches data
    matches.forEach(match => {
      console.log(`Match: ${match.title}, Time: ${new Date(match.date).toLocaleString()}`);
      
      // Access team information if available
      if (match.teams) {
        if (match.teams.home) console.log(`Home: ${match.teams.home.name}`);
        if (match.teams.away) console.log(`Away: ${match.teams.away.name}`);
      }
      
      // Get stream sources
      console.log('Available sources:', match.sources.map(s => s.source).join(', '));
    });
  })
  .catch(error => console.error('Error fetching matches:', error));
To get stream details for a specific match, use the sources from the match object with the Streams API.

Response Format
All endpoints return an array of match objects:

// Example response from /api/matches/football
[
  {
    "id": "match_123",
    "title": "Manchester United vs Liverpool",
    "category": "football",
    "date": 1720598400000,
    "poster": "man-utd-liverpool-poster",
    "popular": true,
    "teams": {
      "home": {
        "name": "Manchester United",
        "badge": "man-utd-badge"
      },
      "away": {
        "name": "Liverpool",
        "badge": "liverpool-badge"
      }
    },
    "sources": [
      {
        "source": "alpha",
        "id": "mu-liv-123"
      },
      {
        "source": "bravo",
        "id": "456-mu-liv"
      }
    ]
  },
  // More match objects...
]

Streams API
The Streams API provides access to live streaming sources for sports events. These endpoints return stream details that can be used to embed or access video streams for matches.

Stream Object Structure
interface Stream {
    id: string;        // Unique identifier for the stream
    streamNo: number;  // Stream number/index
    language: string;  // Stream language (e.g., "English", "Spanish")
    hd: boolean;       // Whether the stream is in HD quality
    embedUrl: string;  // URL that can be used to embed the stream
    source: string;    // Source identifier (e.g., "alpha", "bravo")
}
Available Endpoints
Source-Specific Stream Endpoints
Get streams from a specific source for a match:

Source	Endpoint
Alpha	GET /api/stream/alpha/[id]
Bravo	GET /api/stream/bravo/[id]
Charlie	GET /api/stream/charlie/[id]
Delta	GET /api/stream/delta/[id]
Echo	GET /api/stream/echo/[id]
Foxtrot	GET /api/stream/foxtrot/[id]
Golf	GET /api/stream/golf/[id]
Hotel	GET /api/stream/hotel/[id]
Intel	GET /api/stream/intel/[id]
Note: Replace [id] with the source-specific match ID from the match's sources array.

How to Use
To access streams for a match:

First, get a match object from the Matches API
Extract the source and id from the match's sources array
Use these values to request streams from the appropriate endpoint
Usage Example
// First, get match data to find available sources
fetch('https://streamed.pk/api/matches/live')
  .then(response => response.json())
  .then(matches => {
    if (matches.length > 0) {
      // Get the first match
      const match = matches[0];
      console.log(`Found match: ${match.title}`);
      
      // Check if the match has sources
      if (match.sources && match.sources.length > 0) {
        // Get the first source
        const source = match.sources[0];
        console.log(`Using source: ${source.source}, ID: ${source.id}`);
        
        // Request streams for this source
        return fetch(`https://streamed.pk/api/stream/${source.source}/${source.id}`);
      } else {
        throw new Error('No sources available for this match');
      }
    } else {
      throw new Error('No matches found');
    }
  })
  .then(response => response.json())
  .then(streams => {
    // Process the streams
    console.log(`Found ${streams.length} streams`);
    
    streams.forEach(stream => {
      console.log(`Stream #${stream.streamNo}: ${stream.language} (${stream.hd ? 'HD' : 'SD'})`);
      console.log(`Embed URL: ${stream.embedUrl}`);
      
      // Here you would typically use the embedUrl to display the stream
      // For example, in an iframe:
      // document.getElementById('player').src = stream.embedUrl;
    });
  })
  .catch(error => console.error('Error:', error));
Response Format
All endpoints return an array of stream objects:

// Example response from /api/stream/alpha/match123
[
  {
    "id": "stream_456",
    "streamNo": 1,
    "language": "English",
    "hd": true,
    "embedUrl": "https://embed.example.com/watch?v=abcd1234",
    "source": "alpha"
  },
  {
    "id": "stream_457",
    "streamNo": 2,
    "language": "Spanish",
    "hd": false,
    "embedUrl": "https://embed.example.com/watch?v=efgh5678",
    "source": "alpha"
  }
  // More stream objects...
]
Embedding a Stream
To embed a stream in your website, use the embedUrl in an iframe:

// HTML
<iframe 
  id="stream-player" 
  width="640" 
  height="360" 
  frameborder="0" 
  allowfullscreen>
</iframe>

// JavaScript
function loadStream(embedUrl) {
  document.getElementById('stream-player').src = embedUrl;
}

Sports API
The Sports API provides access to all available sport categories on the Streamed platform. These sport IDs are used to filter matches by category in the Matches API.

Sport Object Structure
interface Sport {
    id: string;    // Sport identifier (used in Matches API endpoints)
    name: string;  // Display name of the sport
}
Available Endpoint
Get All Sports
Retrieves all available sport categories:

GET /api/sports

Usage Example
// Get all available sports
fetch('https://streamed.pk/api/sports')
  .then(response => response.json())
  .then(sports => {
    // Create a sport selection dropdown
    const select = document.createElement('select');
    select.id = 'sport-selector';
    
    // Add a default option
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select a sport';
    select.appendChild(defaultOption);
    
    // Add an option for each sport
    sports.forEach(sport => {
      const option = document.createElement('option');
      option.value = sport.id;
      option.textContent = sport.name;
      select.appendChild(option);
    });
    
    // Add event listener to load matches when a sport is selected
    select.addEventListener('change', (event) => {
      const sportId = event.target.value;
      if (sportId) {
        // Fetch matches for the selected sport
        fetch(`https://streamed.pk/api/matches/${sportId}`)
          .then(response => response.json())
          .then(matches => {
            console.log(`Found ${matches.length} matches for ${sportId}`);
            // Process matches...
          })
          .catch(error => console.error('Error fetching matches:', error));
      }
    });
    
    // Add the select element to the page
    document.getElementById('sports-container').appendChild(select);
  })
  .catch(error => console.error('Error fetching sports:', error));
Response Format
The endpoint returns an array of sport objects:

// Example response from /api/sports
[
  {
    "id": "football",
    "name": "Football"
  },
  {
    "id": "basketball",
    "name": "Basketball"
  },
  {
    "id": "tennis",
    "name": "Tennis"
  },
  {
    "id": "hockey",
    "name": "Hockey"
  },
  {
    "id": "baseball",
    "name": "Baseball"
  },
  {
    "id": "mma",
    "name": "MMA"
  },
  {
    "id": "boxing",
    "name": "Boxing"
  }
  // More sport objects...
]
Common Use Cases
Building sport category navigation menus
Filtering match listings by sport
Creating sport-specific pages or sections
Implementing search filters for matches

Images API
The Images API provides access to various visual assets used throughout the Streamed platform, including team badges, match posters, and proxied images. All images are served in WebP format for optimal performance.

Available Endpoints
Team Badges
Get team badge images:

GET /api/images/badge/[id].webp

Note: The [id] value is provided in the team.badge field of the match object.

Match Posters
Get match poster images:

GET /api/images/poster/[badge]/[badge].webp

Note: The [badge] values are typically derived from team badge IDs for the match.

Proxied Images
Access images via proxy (useful for external images):

GET /api/images/proxy/[poster].webp

Note: The [poster] value is provided in the poster field of the match object.

Usage Example
// First, get match data to find image references
fetch('https://streamed.pk/api/matches/football')
  .then(response => response.json())
  .then(matches => {
    if (matches.length > 0) {
      const match = matches[0];
      
      // Create container for match details
      const container = document.createElement('div');
      
      // Add match title
      const title = document.createElement('h2');
      title.textContent = match.title;
      container.appendChild(title);
      
      // Add match date
      const date = document.createElement('p');
      date.textContent = new Date(match.date).toLocaleString();
      container.appendChild(date);
      
      // Add team badges if available
      if (match.teams) {
        const teamsDiv = document.createElement('div');
        teamsDiv.style.display = 'flex';
        teamsDiv.style.alignItems = 'center';
        
        if (match.teams.home && match.teams.home.badge) {
          const homeBadge = document.createElement('img');
          homeBadge.src = `https://streamed.pk/api/images/badge/${match.teams.home.badge}.webp`;
          homeBadge.alt = match.teams.home.name;
          homeBadge.width = 50;
          homeBadge.height = 50;
          teamsDiv.appendChild(homeBadge);
        }
        
        const vs = document.createElement('span');
        vs.textContent = ' vs ';
        vs.style.margin = '0 10px';
        teamsDiv.appendChild(vs);
        
        if (match.teams.away && match.teams.away.badge) {
          const awayBadge = document.createElement('img');
          awayBadge.src = `https://streamed.pk/api/images/badge/${match.teams.away.badge}.webp`;
          awayBadge.alt = match.teams.away.name;
          awayBadge.width = 50;
          awayBadge.height = 50;
          teamsDiv.appendChild(awayBadge);
        }
        
        container.appendChild(teamsDiv);
      }
      
      // Add match poster if available
      if (match.poster) {
        const poster = document.createElement('img');
        poster.src = `https://streamed.pk${match.poster}.webp`;
        poster.alt = match.title;
        poster.style.maxWidth = '100%';
        poster.style.marginTop = '20px';
        container.appendChild(poster);
      }
      
      // Add the container to the page
      document.getElementById('match-container').appendChild(container);
    }
  })
  .catch(error => console.error('Error:', error));
HTML Implementation Example
<!-- Team Badge Example -->
<img 
  src="https://streamed.pk/api/images/badge/man-utd-badge.webp" 
  alt="Manchester United" 
  width="50" 
  height="50"
/>

<!-- Match Poster Example -->
<img 
  src="https://streamed.pk/api/images/poster/man-utd-badge/liverpool-badge.webp" 
  alt="Manchester United vs Liverpool" 
  class="match-poster"
/>

<!-- Proxied Image Example -->
<img 
  src="https://streamed.pk/api/images/proxy/custom-event-poster.webp" 
  alt="Special Event" 
  class="event-poster"
/>
Image Optimization Tips
All images are served in WebP format for optimal compression and quality
Use appropriate width/height attributes to prevent layout shifts
Consider using the loading="lazy" attribute for images below the fold
Images can be styled with CSS as needed for responsive design
"
I have some requirements for the Watchnow page. Here are some of my requrements that must required on the page: "
1. Header will be same as my other pages have like the matchinformation page.
2. Title will be in this format: "Live (Match title) Stream Link (Source name + stream link no. like 1/2/3/4)"
"
3. First paragraph will be in this format: "(Match title) live on Methstreams.world. Join the stream and chat with others in our live chat!"
4. Below the first paragraph, there will be the stream link embedded in a beautiful container.
5. Below the embed container, at the left side the title will be "Available Streams", at the right there will be the Back button.
6. Below the "Available streams" there will be shown the source counts like "Showing top quality sources • 3 of 3 sources" exactly same as the match information page. Rules will be same.
7. Then there will be shown all the sources exactly same as the matchinformation page. All the rules will be same.
8. On the matchinformation page, there are open in new tab icons beside the stream links. But on this page, beside The current stream link there will be writte "Running" instead of the open in new window icon and the row will be selected as active so that user clearly understand this link is currently streaming on this page.
9. If the selected row is not available inside the top 3 sources and available after clicking the "Show more sources" button, then all the sources should be visible instead of showing the show more button, so that user clearly see which link is currently streaming. "Show more" button and the rules will be same as the matchinformation page.
10. All other layout and structure will be same as the matchinformation page.
If you have understand clearly, then write the index.html, watchnow.css, and the watchnow.js code for the "Watchnow" page. I have already made the "Watchnow" folder.